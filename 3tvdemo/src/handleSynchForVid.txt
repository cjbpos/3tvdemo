useWebSocket.js: -----------------------------------------------------------

import { useEffect, useRef } from 'react';

const useWebSocket = (url, onMessage) => {
    const socketRef = useRef(null);
    const isUnloading = useRef(false);

    useEffect(() => {
        const connectWebSocket = () => {
            socketRef.current = new WebSocket(url);
            socketRef.current.onopen = () => {
                console.log("WebSocket connection established");
                const message = { type: "connection", content: "New client connected" };
                socketRef.current.send(JSON.stringify(message));
            };
            socketRef.current.onmessage = (event) => {
                console.log("Message received:", event.data);
                let messageData;
                try {
                    messageData = JSON.parse(event.data);
                } catch (e) {
                    console.log("Error parsing message data:", e);
                    return;
                }
                if (messageData.type === 'unload') {
                    console.log('Received unload message');
                    if (!isUnloading.current) {
                        isUnloading.current = true;
                        window.location.reload();
                    }
                }
                if (onMessage) {
                    onMessage(messageData);
                }
            };

            socketRef.current.onerror = (error) => {
                console.error("WebSocket Error:", error);
            };

            socketRef.current.onclose = () => {
                if (!isUnloading.current) {
                    // Reconnect after a short delay
                    setTimeout(connectWebSocket, 1000);
                }
            };
        };

        connectWebSocket();

        const handleUnload = () => {
            console.log('Sending unload message');
            isUnloading.current = true;
            if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
                socketRef.current.send(JSON.stringify({ type: 'unload' }));
            }
        };

        window.addEventListener('unload', handleUnload);

        return () => {
            console.log('Closing WebSocket connection');
            if (socketRef.current) {
                socketRef.current.close();
            }
            window.removeEventListener('unload', handleUnload);
        };
    }, [url, onMessage]);

    const sendMessage = (message) => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            socketRef.current.send(JSON.stringify(message));
        }
    };

    return sendMessage;
};

export default useWebSocket;



Monitors:-------------------------------------------------------------------

import watermelon from './images/watermelon.png';
import mango from './images/mango.png';
import banana from './images/banana.png';
import blue from './images/blueberry.png';
import strawberry from './images/strawberry.png';

import vid1 from './images/c1.mp4';

import React from 'react';
import './App.css';
import useWebSocket from './useWebSocket';

const slides = [watermelon, mango, banana, blue, strawberry];

function FirstMonitor() {
    const [currentSlide, setCurrentSlide] = React.useState(0);
    const [showVideo, setShowVideo] = React.useState(false);
    const videoRef = React.useRef(null);

    const handleWebSocketMessage = (messageData) => {
        if (messageData.type === 'setVideoTimeout') {
            // Set video timeout to 30 seconds
            clearTimeout(videoTimeout);
            videoTimeout = setTimeout(startVideoPlayback, 30000);
        }
    };

    const sendMessage = useWebSocket('ws://192.168.88.92:8080', handleWebSocketMessage);

    React.useEffect(() => {
        let slideInterval;
        let videoTimeout;

        const startSlideshow = () => {
            slideInterval = setInterval(() => {
                setCurrentSlide((prevSlide) => (prevSlide + 1) % slides.length);
            }, 10000);
        };

        const startVideoPlayback = () => {
            setShowVideo(true);
            clearInterval(slideInterval);
            if (videoRef.current) {
                const playPromise = videoRef.current.play();
                if (playPromise !== undefined) {
                    playPromise.catch((error) => {
                        console.error('Error playing the video:', error);
                    });
                }
            }
        };

        const handleVideoEnd = () => {
            setShowVideo(false);
            if (videoRef.current) {
                videoRef.current.currentTime = 0;
            }
            startSlideshow();
            videoTimeout = setTimeout(startVideoPlayback, 60000);
        };

        startSlideshow();
        videoTimeout = setTimeout(startVideoPlayback, 60000);

        if (videoRef.current) {
            videoRef.current.addEventListener('ended', handleVideoEnd);
        }

        // Send message to set the video timeout for all clients
        sendMessage({ type: 'setVideoTimeout', timeout: 30000 });

        return () => {
            clearInterval(slideInterval);
            clearTimeout(videoTimeout);
            if (videoRef.current) {
                videoRef.current.removeEventListener('ended', handleVideoEnd);
            }
        };
    }, [slides.length]);

    return (
        <div className="newSlideshow">
            {slides.map((slide, index) => (
                <div key={index}
                    className={`newSlide ${index === currentSlide && !showVideo ? 'active' : ''}`}>
                    <img src={slide} alt={`Slide ${index + 1}`} />
                </div>
            ))}
            <div className={`video-container ${showVideo ? 'visible' : 'hidden'}`}>
                <video
                    ref={videoRef}
                    muted={true}
                    src={vid1}
                    playsInline>
                </video>
            </div>
        </div>
    );
}

export default FirstMonitor;

Server: -------------------------------------------------------------------

const http = require('http');
const fs = require('fs');
const path = require('path');
const WebSocket = require('ws');

// Path to your video file
const videoPath = path.join(__dirname, 'images/c1.mp4');
const htmlPath = path.join(__dirname, 'singleVid.html');
const cssPath = path.join(__dirname, 'App.css');

// HTTP server to serve the video
const server = http.createServer((req, res) => {
    if (req.url === '/') {
        fs.readFile(htmlPath, (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('Not found');
            } else {
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.end(data);
            }
        });
    } else if (req.url === '/video') {
        fs.stat(videoPath, (err, stats) => {
            if (err) {
                console.error('File not found');
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('Not Found');
                return;
            }

            const { range } = req.headers;
            if (!range) {
                res.writeHead(200, { 'Content-Type': 'video/mp4' });
                fs.createReadStream(videoPath).pipe(res);
                return;
            }

            const parts = range.replace(/bytes=/, "").split("-");
            const start = parseInt(parts[0], 10);
            const end = parts[1] ? parseInt(parts[1], 10) : stats.size - 1;
            const chunksize = (end - start) + 1;

            res.writeHead(206, {
                'Content-Range': `bytes ${start}-${end}/${stats.size}`,
                'Accept-Ranges': 'bytes',
                'Content-Length': chunksize,
                'Content-Type': 'video/mp4',
            });

            const stream = fs.createReadStream(videoPath, { start, end })
                .on('open', () => stream.pipe(res))
                .on('error', err => res.end(err));
        });
    } else if (req.url === '/App.css') {
        fs.readFile(cssPath, (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('Not Found');
            } else {
                res.writeHead(200, { 'Content-Type': 'text/css' });
                res.end(data);
            }
        });
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
    }
});

// WebSocket server on the same port
const wss = new WebSocket.Server({ server });

wss.on('connection', (socket) => {
    const clientAddress = socket._socket.remoteAddress;
    console.log(`Client connected from ${clientAddress}`);

    // Send a welcome message to the newly connected client
    socket.send(JSON.stringify({ type: 'welcome', message: 'Welcome to the WebSocket server!' }));

    // Notify all clients about the new connection
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN && client !== socket) {
            client.send(JSON.stringify({ type: 'newClient', message: 'A new client has connected' }));
        }
    });

    socket.on('message', (message) => {
        let parsedMessage;
        try {
            parsedMessage = JSON.parse(message);
        } catch (e) {
            console.log("Error parsing:", e);
            return;
        }
        
        if (parsedMessage.type === 'unload') {
            console.log("Broadcasting unload to all clients");
            wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN && client !== socket) {
                    client.send(JSON.stringify({ type: 'unload' }));
                }
            });
        } else if (parsedMessage.type === 'browserInfo') {
            console.log(`Browser Info: ${parsedMessage.message}`);
        } else if (parsedMessage.type === 'setVideoTimeout') {
            console.log('Setting video timeout for all clients');
            wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ type: 'setVideoTimeout', timeout: parsedMessage.timeout }));
                }
            });
        }
    });

    socket.on('close', () => {
        console.log("Client disconnected");
    });
});

server.listen(8080, () => {
    console.log('Server running at http://localhost:8080/');
});
